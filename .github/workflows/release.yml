name: Build and Release

on:
  workflow_dispatch:
    inputs:
      pypi_target:
        description: 'PyPI target'
        required: true
        type: choice
        options:
          - 'testpypi'
          - 'pypi'
        default: 'testpypi'

jobs:
  build:
    name: Build distributions
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Extract version
        id: get_version
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Build distributions
        run: |
          python -m build
          ls -la dist/
      
      - name: Check distributions
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-distributions
          path: dist/
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  publish-pypi:
    name: Publish to ${{ github.event.inputs.pypi_target }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.pypi_target }}
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-distributions
          path: dist/
      
      - name: Publish to Test PyPI
        if: github.event.inputs.pypi_target == 'testpypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      
      - name: Publish to PyPI
        if: github.event.inputs.pypi_target == 'pypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  github-release:
    name: Create GitHub Release
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    if: github.event.inputs.pypi_target == 'pypi'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-distributions
          path: dist/
      
      - name: Create tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ needs.build.outputs.version }}" -m "Release v${{ needs.build.outputs.version }}"
          git push origin "v${{ needs.build.outputs.version }}"
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.build.outputs.version }}" \
            --title "PDBFixer v${{ needs.build.outputs.version }}" \
            --generate-notes \
            dist/*